local getResourcesStat = function(resources, isInput, precision)
 local result = {}
 for i, resource in ipairs(resources) do
 result[i] = { resource = resource, input = isInput,
 amount = game.forces["player"].item_production_statistics.get_flow_count { name = resource, input = isInput, precision_index = precision, count = false } }
 end
 return result
end

/getResourcesStat {"resources": ["copper-plate", "copper-ore"]}


20 Error MainLoop.cpp:1284: Exception at tick 20852376: Error while running command "getResourcesStat": Unknown item name: ACCUMULATOR
stack traceback:
	[C]: in function 'get_flow_count'
	__factorio-rcon-helper__/control.lua:9: in function 'getResourcesStat'
	__factorio-rcon-helper__/control.lua:48: in function <__factorio-rcon-helper__/control.lua:46>
 228.420 Error ServerMultiplayerManager.cpp:92: MultiplayerManager failed: "Error while running command "getResourcesStat": Unknown item name: ACCUMULATOR
stack traceback:
	[C]: in function 'get_flow_count'
	__factorio-rcon-helper__/control.lua:9: in function 'getResourcesStat'
	__factorio-rcon-helper__/control.lua:48: in function <__factorio-rcon-helper__/control.lua:46>"
 228.420 Info ServerMultiplayerManager.cpp:795: updateTick(20852376) changing state from(InGame) to(Failed)
 228.428 Quitting: multiplayer error.
 228.820 Info ServerMultiplayerManager.cpp:141: Quitting multiplayer connection.
 228.820 Info ServerMultiplayerManager.cpp:795: updateTick(4294967
 
 
getResourcesStat = function(resources) local result = {fiveSecondResourcesIn = {}, oneMinuteResourcesIn = {}, tenMinutesResourcesIn = {}, oneHourResourcesIn = {}, fiftyHourResourcesIn = {}, twoHundredFiftyHourResourcesIn = {}, thousandHourResourcesIn = {}, fiveSecondResourcesOut = {}, oneMinuteResourcesOut = {}, tenMinutesResourcesOut = {}, oneHourResourcesOut = {}, fiftyHourResourcesOut = {}, twoHundredFiftyHourResourcesOut = {}, thousandHourResourcesOut = {}} for i, resource in ipairs(resources) do table.insert(result.fiveSecondResourcesIn, { resource = resource, input = true, amount = game.forces["player"].item_production_statistics.get_flow_count { name = resource, input = true, precision_index = 0, count = false }}) table.insert(result.fiveSecondResourcesOut, { resource = resource, input = false, amount = game.forces["player"].item_production_statistics.get_flow_count { name = resource, input = true, precision_index = 0, count = false }}) table.insert(result.oneMinuteResourcesIn, { resource = resource, input = true, amount = game.forces["player"].item_production_statistics.get_flow_count { name = resource, input = true, precision_index = 1, count = false }}) table.insert(result.oneMinuteResourcesOut, { resource = resource, input = false, amount = game.forces["player"].item_production_statistics.get_flow_count { name = resource, input = true, precision_index = 1, count = false }}) table.insert(result.tenMinutesResourcesIn, { resource = resource, input = true, amount = game.forces["player"].item_production_statistics.get_flow_count { name = resource, input = true, precision_index = 2, count = false }}) table.insert(result.tenMinutesResourcesOut, { resource = resource, input = false, amount = game.forces["player"].item_production_statistics.get_flow_count { name = resource, input = true, precision_index = 2, count = false }}) table.insert(result.oneHourResourcesIn, { resource = resource, input = true, amount = game.forces["player"].item_production_statistics.get_flow_count { name = resource, input = true, precision_index = 3, count = false }}) table.insert(result.oneHourResourcesOut, { resource = resource, input = false, amount = game.forces["player"].item_production_statistics.get_flow_count { name = resource, input = true, precision_index = 3, count = false }}) table.insert(result.fiftyHourResourcesIn, { resource = resource, input = true, amount = game.forces["player"].item_production_statistics.get_flow_count { name = resource, input = true, precision_index = 4, count = false }}) table.insert(result.fiftyHourResourcesOut, { resource = resource, input = false, amount = game.forces["player"].item_production_statistics.get_flow_count { name = resource, input = true, precision_index = 4, count = false }}) table.insert(result.twoHundredFiftyHourResourcesIn, { resource = resource, input = true, amount = game.forces["player"].item_production_statistics.get_flow_count { name = resource, input = true, precision_index = 5, count = false }}) table.insert(result.twoHundredFiftyHourResourcesOut, { resource = resource, input = false, amount = game.forces["player"].item_production_statistics.get_flow_count { name = resource, input = true, precision_index = 5, count = false }}) table.insert(result.thousandHourResourcesIn, { resource = resource, input = true, amount = game.forces["player"].item_production_statistics.get_flow_count { name = resource, input = true, precision_index = 6, count = false }}) table.insert(result.thousandHourResourcesOut, { resource = resource, input = false, amount = game.forces["player"].item_production_statistics.get_flow_count { name = resource, input = true, precision_index = 6, count = false }}) end return result end
/c game.player.print(game.table_to_json(getResourcesStat({resources={"accumulator","advanced-circuit","arithmetic-combinator","artillery-turret","assembling-machine-1","assembling-machine-2","assembling-machine-3","battery","battery-equipment","battery-mk2-equipment","beacon","belt-immunity-equipment","big-electric-pole","boiler","burner-generator","burner-inserter","burner-mining-drill","centrifuge","chemical-plant","coal","coin","concrete","constant-combinator","construction-robot","copper-cable","copper-ore","copper-plate","crude-oil-barrel","decider-combinator","discharge-defense-equipment","electric-energy-interface","electric-engine-unit","electric-furnace","electric-mining-drill","electronic-circuit","empty-barrel","energy-shield-equipment","energy-shield-mk2-equipment","engine-unit","exoskeleton-equipment","explosives","express-loader","express-splitter","express-transport-belt","express-underground-belt","fast-inserter","fast-loader","fast-splitter","fast-transport-belt","fast-underground-belt","filter-inserter","flamethrower-turret","flying-robot-frame","fusion-reactor-equipment","gate","green-wire","gun-turret","hazard-concrete","heat-exchanger","heat-interface","heat-pipe","heavy-oil-barrel","infinity-chest","infinity-pipe","inserter","iron-chest","iron-gear-wheel","iron-ore","iron-plate","iron-stick","item-unknown","lab","land-mine","landfill","laser-turret","light-oil-barrel","linked-belt","linked-chest","loader","logistic-chest-active-provider","logistic-chest-buffer","logistic-chest-passive-provider","logistic-chest-requester","logistic-chest-storage","logistic-robot","long-handed-inserter","low-density-structure","lubricant-barrel","medium-electric-pole","night-vision-equipment","nuclear-fuel","nuclear-reactor","offshore-pump","oil-refinery","personal-laser-defense-equipment","personal-roboport-equipment","personal-roboport-mk2-equipment","petroleum-gas-barrel","pipe","pipe-to-ground","plastic-bar","player-port","power-switch","processing-unit","programmable-speaker","pump","pumpjack","radar","rail-chain-signal","rail-signal","red-wire","refined-concrete","refined-hazard-concrete","roboport","rocket-control-unit","rocket-fuel","rocket-part","rocket-silo","satellite","simple-entity-with-force","simple-entity-with-owner","small-electric-pole","small-lamp","solar-panel","solar-panel-equipment","solid-fuel","splitter","stack-filter-inserter","stack-inserter","steam-engine","steam-turbine","steel-chest","steel-furnace","steel-plate","stone","stone-brick","stone-furnace","stone-wall","storage-tank","substation","sulfur","sulfuric-acid-barrel","train-stop","transport-belt","underground-belt","uranium-235","uranium-238","uranium-fuel-cell","uranium-ore","used-up-uranium-fuel-cell","water-barrel","wood","wooden-chest"}})))